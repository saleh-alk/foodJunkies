#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
// var debug = require('debug')('backend:server');
const mongoose = require("mongoose");

const { mongoURI: db } = require("../config/keys.js")
mongoose.set('strictQuery', true);

const debug = require("debug");
const serverLogger = debug("backend:server");
const dbLogger = debug("backend: mongodb");
const cors = require("cors")




var http = require('http');
// const { Server } = require("socket.io");

const userSchema = require('../models/User');

// app.use(cors())

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// const io = new Server (server, {
//     cors: {
//       origin: "http://localhost:3000",
//       methods: ["GET", "POST"]
//     }
// })

// io.on("connection", (socket)=> {
//   // console.log(`User Conneted ${socket.id} `)

//   socket.on("send_message", (data) => {
//     socket.broadcast.emit("receive_message", data)
//   })

// })

/**
 * Listen on provided port, on all network interfaces.
 */


server.on('error', onError);
mongoose
  .connect(db, { useNewUrlParser: true })
  .then(() => {
    dbLogger("Connected to Mongodb Successfully")

    server.listen(port);

  })
  .catch(err => serverLogger(err))
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  // debug('Listening on ' + bind);

  serverLogger("Listening on" + bind)
}
